@using Turnstile.Core.Constants
@using Turnstile.Web.Controllers

@{
    ViewData["Title"] = $"{Model.SubscriptionName} | Subscription | Turnstile";

    string ChooseStateRowClass()
    {
        return Model.State switch
        {
            SubscriptionStates.Active => "table-primary",
            SubscriptionStates.Canceled => "table-danger",
            SubscriptionStates.Suspended => "table-warning",
            SubscriptionStates.Purchased => "table-success",
            _ => string.Empty
        };
    }

    string ChooseSeatingMeterClass()
    {
        if (Model.Seating!.HasNoMoreSeats)
        {
            return "progress-bar progress-bar-striped bg-danger";
        }
        else if (Model.Seating!.HasReachedLowSeatLevel)
        {
            return "progress-bar progress-bar-striped bg-warning";
        }
<<<<<<< HEAD
        else
=======
        else     
>>>>>>> c9bb448a63c173ad7d2f7096ab607bc2d78f7959
        {
            return "progress-bar progress-bar-striped bg-success";
        }
    }

    string DescribeState()
    {
        return Model.State switch
        {
            SubscriptionStates.Active => "Active",
            SubscriptionStates.Canceled => "Canceled",
            SubscriptionStates.Suspended => "Suspended",
            SubscriptionStates.Purchased => "Provisioning",
            _ => throw new InvalidOperationException($"Subscription state [{Model.State}] not supported.")
        };
    }

    string DescribeSeatingStrategy()
    {
        return Model.Seating!.SeatingStrategyName switch
        {
            SeatingStrategies.FirstComeFirstServed => "First come, first served",
            SeatingStrategies.MonthlyActiveUser => "Monthly active user",
            _ => throw new InvalidOperationException($"Subscription seating strategy [{Model.Seating!.SeatingStrategyName}] not supported.")
        };
    }

    string DescribeTotalSeats(SubscriptionRowViewModel subscription)
    {
        return (subscription.TotalSeats == null ? "N/A" : subscription.TotalSeats!.Value.ToString());
    }
}

@model SubscriptionDetailViewModel

<h4 class="text-muted">Subscription</h4>
<h1>
    @Model.SubscriptionName &nbsp;
    @if (Model.IsFreeSubscription)
    {
        <span>&nbsp;<span class="badge bg-secondary">Free</span></span>
    }
    @if (Model.IsTestSubscription)
    {
        <span>&nbsp;<span class="badge bg-warning text-dark">Test</span></span>
    }
</h1>

<hr />

@if (Model.IsBeingConfigured)
{
<<<<<<< HEAD
    <div class="alert alert-warning d-flex align-items-center" style="margin-top: 10px; margin-bottom: 20px">
=======
    <div class="alert alert-warning d-flex align-items-center" style="margin-top: 20px; margin-bottom: 20px">
>>>>>>> c9bb448a63c173ad7d2f7096ab607bc2d78f7959
        <div>
            This subscription is being configured and is temporarily unavailable.
        </div>
    </div>
}

@if (Model.Seating!.HasReachedLowSeatLevel)
{
    <div class="alert alert-warning d-flex align-items-center" role="alert" style="margin-top: 20px; margin-bottom: 20px">
        <div>
<<<<<<< HEAD
            This subscription has less than 25% available seating. @if (!Model.UserIsTurnstileAdmin)
            {
                <a href="#" class="alert-link" target="_blank">Buy more »</a>
            }
=======
            This subscription has less than 25% available seating. <a href="#" class="alert-link">Buy more »</a>
>>>>>>> c9bb448a63c173ad7d2f7096ab607bc2d78f7959
        </div>
    </div>
}

@if (Model.Seating!.HasNoMoreSeats)
{
    <div class="alert alert-danger d-flex align-items-center" style="margin-top: 20px; margin-bottom: 20px">
        <div>
<<<<<<< HEAD
            This subscription has no available seats. @if (!Model.UserIsTurnstileAdmin)
            {
                <a href="#" class="alert-link" target="_blank">Buy more »</a>
            }
=======
            This subscription has no available seats. <a href="#" class="alert-link">Buy more »</a>
>>>>>>> c9bb448a63c173ad7d2f7096ab607bc2d78f7959
        </div>
    </div>
}

<<<<<<< HEAD
<div class="btn-group" style="margin-top: 20px; margin-bottom: 20px">
    @if (Model.UserIsSubscriberAdmin)
    {
        if (Model.Seating!.HasNoMoreSeats)
        {
            <a href="#" class="btn btn-outline-primary disabled">Reserve seat »</a>
        }
        else
        {
            <a href="@Url.RouteUrl(SubscriptionsController.RouteNames.GetReserveSeat, new { subscriptionId = Model.SubscriptionId })" class="btn btn-outline-primary">Reserve seat »</a>
        }
    }
    @if (Model.ManagementUrls != null)
    {
        foreach (var urlName in Model.ManagementUrls.Keys)
        {
            <a href="@Model.ManagementUrls[urlName]" class="btn btn-outline-primary" target="_blank">@urlName »</a>
        }
    }
</div>

=======
>>>>>>> c9bb448a63c173ad7d2f7096ab607bc2d78f7959
<table class="table" style="margin-bottom: 20px">
    <tbody>
        <tr style="width: 25%">
            <th scope="row">ID</th>
            <td>@Model.SubscriptionId</td>
        </tr>
        <tr>
            <th scope="row">Tenant</th>
            <td>
                @(Model.TenantName ?? Model.TenantId) <br />
                <small class="text-muted">@Model.TenantId</small>
            </td>
        </tr>
        <tr class="@ChooseStateRowClass()">
            <th scope="row">State</th>
            <td>
                @DescribeState()
                <small class="text-muted">as of @Model.StateLastUpdatedDateTimeUtc!.Value.ToString("g") UTC</small>
            </td>
        </tr>
        <tr>
            <th scope="row">Created</th>
            <td>@Model.StateLastUpdatedDateTimeUtc!.Value.ToString("g") UTC</td>
        </tr>
        <tr class="table-secondary">
            <th scope="row" colspan="2">Security Roles</th>
        </tr>
        <tr>
            <th scope="row">Administrators</th>
            <td>@Model.AdminRoleName</td>
        </tr>
        <tr>
            <th scope="row">Users</th>
            <td>@Model.UserRoleName</td>
        </tr>
        <tr class="table-secondary">
            <th scope="row" colspan="2">Administrator</th>
        </tr>
        <tr>
            <th scope="row">Name</th>
            <td>@Model.AdminName</td>
        </tr>
        <tr>
            <th scope="row">Email</th>
            <td>@Model.AdminEmail</td>
        </tr>
    </tbody>
</table>

<h2>Seating</h2>
<hr />

<table class="table" style="margin-bottom: 20px">
<<<<<<< HEAD
    <thead>
        <tr>
            <th>Seating strategy</th>
            <th>Default seat expiry</th>
            <th>Seat reservation expiry</th>
        </tr>
    </thead>
    <tbody>
        <tr>
=======
    <tbody>
        <tr style="width: 25%">
            <th scope="row">Seating strategy</th>
>>>>>>> c9bb448a63c173ad7d2f7096ab607bc2d78f7959
            <td>
                @DescribeSeatingStrategy()
                @if (Model.Seating!.IsLimitedOverflowSeatingEnabled)
                {
                    <br />
                    <small class="text-muted">Limited overflow seating enabled</small>
                }
            </td>
<<<<<<< HEAD
            <td>@($"{Model.Seating!.SeatExpiryInDays} day(s)")</td>
=======
        </tr>
        <tr>
            <th scope="row">Default seat expiry</th>
            <td>@($"{Model.Seating!.SeatExpiryInDays} day(s)")</td>
        </tr>
        <tr>
            <th scope="row">Seat reservation expiry</th>
>>>>>>> c9bb448a63c173ad7d2f7096ab607bc2d78f7959
            <td>@($"{Model.Seating!.SeatReservationExpiryInDays} day(s)")</td>
        </tr>
    </tbody>
</table>

@if (Model.Seating!.ShowSeatingMeter)
{
    <div style="margin-top: 20px; margin-bottom: 20px">
        <h3> @Model.Seating!.TotalUsedSeats <span> / </span> @Model.Seating!.TotalSeats <small class="text-muted">seats consumed</small></h3>
        <div class="progress">
            <div class="@ChooseSeatingMeterClass()" role="progressbar" style="@($"width: {Model.Seating!.ConsumedSeatsPct}%")" aria-valuenow="@Model.Seating!.ConsumedSeatsPct" aria-valuemin="0" aria-valuemax="100">
            </div>
        </div>
    </div>
<<<<<<< HEAD
}

<table class="table" style="margin-bottom: 20px">
    <tbody>
        <tr class="table-secondary">
            <th colspan="4">Occupied seats</th>
        </tr>
        <tr>
            <th>Occupant</th>
            <th>Provided on</th>
            <th>Expires on</th>
            <th></th>
        </tr>
        @foreach (var occupiedSeat in Model.Seating!.OccupiedSeats)
        {
            var rowClass = (occupiedSeat.IsLimited ? "table-warning" : string.Empty);

            <tr class="@rowClass">
                <td>
                    @occupiedSeat.UserName
                    @if (occupiedSeat.IsLimited)
                    {
                        <span class="badge bg-warning text-dark">Limited</span>
                    }
                    <br />
                    <small class="text-muted">@occupiedSeat.UserId</small>
                </td>
                <td>@occupiedSeat.ProvidedDateTimeUtc!.Value.ToString("g") UTC</td>
                <td>@occupiedSeat.ExpiresDateTimeUtc!.Value.ToString("g") UTC</td>
                <td>
                    <button type="button" class="btn btn-danger" disabled>Release seat</button>
                </td>
            </tr>
        }
        <tr class="table-secondary">
            <th colspan="4">Reserved seats</th>
        </tr>
        <tr>
            <th>Reserved for</th>
            <th>Reserved on</th>
            <th>Expires on</th>
            <th></th>
        </tr>
        @foreach (var reservedSeat in Model.Seating!.ReservedSeats)
        {
            <tr>
                <td>@reservedSeat.ReservedForEmail</td>
                <td>@reservedSeat.ReservedDateTimeUtc!.Value.ToString("g") UTC</td>
                <td>@reservedSeat.ExpiresDateTimeUtc!.Value.ToString("g") UTC</td>
                <td>
                    <button type="button" class="btn btn-danger" disabled>Release seat</button>
                </td>
            </tr>
        }
    </tbody>
</table>
=======
}
>>>>>>> c9bb448a63c173ad7d2f7096ab607bc2d78f7959
