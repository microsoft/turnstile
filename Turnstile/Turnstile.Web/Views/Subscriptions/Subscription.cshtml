@using Turnstile.Core.Constants;
@using Turnstile.Web.Controllers
@using Turnstile.Web.Extensions;

@model SubscriptionDetailViewModel

@{
    var layoutModel = ViewData.GetLayoutModel()!;
    var seatingModel = ViewData.GetSeatingModel()!;
    var subContextModel = ViewData.GetSubscriptionContextModel()!;

    var allSubscriptionsUrl = Url.RouteUrl(SubscriptionsController.RouteNames.GetSubscriptions);

    var reserveSeatUrl = Url.RouteUrl(SubscriptionsController.RouteNames.GetReserveSeat,
        new { subscriptionId = subContextModel.SubscriptionId });

    var subTitle = string.IsNullOrEmpty(subContextModel.SubscriptionName)
        ? "Manage subscription | Turnstile"
        : $"Manage {subContextModel.SubscriptionName} | Turnstile";

    var seatingTabBadgeColor = seatingModel.Seats.Any()
        ? "badge text-bg-danger"
        : "badge text-bg-secondary";

    ViewData["Title"] = subTitle;

    bool CanUserEditSubscriptionName() =>
        (subContextModel.CanUserAdministerSubscription || subContextModel.CanUserAdministerSubscription) &&
        (subContextModel.State != SubscriptionStates.Canceled);

    bool CanUserEditTenantName() =>
        (subContextModel.CanUserAdministerSubscription || subContextModel.CanUserAdministerSubscription) &&
        (subContextModel.State != SubscriptionStates.Canceled);

    bool CanUserEditTenantCountry() =>
        (subContextModel.CanUserAdministerSubscription || subContextModel.CanUserAdministerSubscription) &&
        (subContextModel.State != SubscriptionStates.Canceled);

    bool CanUserEditAdminName() =>
        (subContextModel.CanUserAdministerSubscription || subContextModel.CanUserAdministerSubscription) &&
        (subContextModel.State != SubscriptionStates.Canceled);

    bool CanUserEditAdminEmail() =>
        (subContextModel.CanUserAdministerSubscription || subContextModel.CanUserAdministerSubscription) &&
        (subContextModel.State != SubscriptionStates.Canceled);

    bool CanUserEditAdminRole() =>
        (subContextModel.CanUserAdministerSubscription || subContextModel.CanUserAdministerSubscription) &&
        (subContextModel.State != SubscriptionStates.Canceled);

    bool CanUserEditUserRole() =>
        (subContextModel.CanUserAdministerSubscription || subContextModel.CanUserAdministerSubscription) &&
        (subContextModel.State != SubscriptionStates.Canceled);

    bool CanUserEditState() =>
        subContextModel.CanUserAdministerTurnstile &&
        subContextModel.State != SubscriptionStates.Canceled;

    bool CanUserEditConfigurationState() =>
        subContextModel.CanUserAdministerTurnstile &&
        subContextModel.State != SubscriptionStates.Canceled;

    bool CanUserEditFreeTrialSubscription() =>
        subContextModel.CanUserAdministerTurnstile &&
        subContextModel.State != SubscriptionStates.Canceled;

    bool CanUserEditTestSubscription() =>
        subContextModel.CanUserAdministerTurnstile &&
        subContextModel.State != SubscriptionStates.Canceled;

    bool CanUserEditOfferId() =>
        subContextModel.CanUserAdministerTurnstile &&
        subContextModel.State != SubscriptionStates.Canceled;

    bool CanUserEditPlanId() =>
        subContextModel.CanUserAdministerTurnstile &&
        subContextModel.State != SubscriptionStates.Canceled;
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <span></span><a href="@allSubscriptionsUrl">Subscriptions</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            @if (string.IsNullOrEmpty(subContextModel.SubscriptionName))
            {
                <span>Subscription</span>
            }
            else
            {
                <span>@subContextModel.SubscriptionName</span>
            }
            @if (subContextModel.IsBeingConfigured || subContextModel.State == SubscriptionStates.Purchased)
            {
                <span title="This subscription is being configured and is temporarily unavailable.">&nbsp;
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16">
                        <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z" />
                    </svg>
                </span>
            }
            @if (subContextModel.IsFreeTrialSubscription)
            {
                <span>&nbsp;<span class="badge text-bg-success" title="This is a free trial subscription.">Free trial</span></span>
            }
            @if (subContextModel.IsTestSubscription)
            {
                <span>&nbsp;<span class="badge text-bg-info" title="This is a test subscription.">Test</span></span>
            }
        </li>
    </ol>
</nav>

<h1>Manage subscription</h1>
<hr />

<div id="subscriptionAlerts">
    @if (Model.IsSubscriptionUpdated)
    {
        <div class="alert alert-success d-flex align-items-center" role="alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
            </svg>
            <div style="margin-left: 5px">
                <span>Subscription updated.</span>
            </div>
        </div>
    }
    else if (Model.HasValidationErrors)
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-octagon-fill" viewBox="0 0 16 16">
                <path d="M11.46.146A.5.5 0 0 0 11.107 0H4.893a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146zm-6.106 4.5L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 1 1 .708-.708z" />
            </svg>
            <div style="margin-left: 5px">
                <span>Unable to save subscription changes. Please review below.</span>
            </div>
        </div>
    }

    @if (subContextModel.State == SubscriptionStates.Canceled)
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-octagon-fill" viewBox="0 0 16 16">
                <path d="M11.46.146A.5.5 0 0 0 11.107 0H4.893a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146zm-6.106 4.5L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 1 1 .708-.708z" />
            </svg>
            <div style="margin-left: 5px">
                <span>This subscription has been canceled.</span>
                @if (subContextModel.CanUserAdministerSubscription)
                {
                    <span>&nbsp;Please @Html.Raw(layoutModel.ContactSalesHtml) to purchase a new subscription or @Html.Raw(layoutModel.ContactSupportHtml) for assistance.</span>
                }
            </div>
        </div>
    }
    else
    {
        if (subContextModel.State == SubscriptionStates.Suspended)
        {
            <div class="alert alert-warning d-flex align-items-center" role="alert">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle-fill" viewBox="0 0 16 16">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                </svg>
                <div style="margin-left: 5px">
                    <span>This subscription has been temporarily suspended.</span>
                    @if (subContextModel.CanUserAdministerSubscription)
                    {
                        <span>&nbsp;Please @Html.Raw(layoutModel.ContactSalesHtml) to reactivate your subscription or @Html.Raw(layoutModel.ContactSupportHtml) for assistance.</span>
                    }
                </div>
            </div>
        }
        else if (subContextModel.State == SubscriptionStates.Purchased || subContextModel.IsBeingConfigured)
        {
            <div class="alert alert-warning d-flex align-items-center" role="alert">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hourglass-split" viewBox="0 0 16 16">
                    <path d="M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351z" />
                </svg>
                <div style="margin-left: 5px">
                    <span>This subscription is being configured and is temporarily unavailable.</span>
                    @if (subContextModel.CanUserAdministerSubscription)
                    {
                        <span>Please try again later or @Html.Raw(layoutModel.ContactSupportHtml) if needed.</span>
                    }
                </div>
            </div>
        }

        if (seatingModel.SubscriptionHasNoMoreSeats)
        {
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-x" viewBox="0 0 16 16">
                    <path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm.256 7a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z" />
                    <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm-.646-4.854.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 0 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 .708-.708Z" />
                </svg>
                <div style="margin-left: 5px">
                    <span>This subscription has no more seats available.</span>
                    @if (subContextModel.CanUserAdministerSubscription)
                    {
                        <span>&nbsp;Please @Html.Raw(layoutModel.ContactSalesHtml) to purchase more seats or @Html.Raw(layoutModel.ContactSupportHtml) for assistance.</span>
                    }
                </div>
            </div>
        }
        else if (seatingModel.SubscriptionHasLimitedSeats)
        {
            <div class="alert alert-warning" role="alert">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-exclamation" viewBox="0 0 16 16">
                    <path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm.256 7a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z" />
                    <path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Zm-3.5-2a.5.5 0 0 0-.5.5v1.5a.5.5 0 0 0 1 0V11a.5.5 0 0 0-.5-.5Zm0 4a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z" />
                </svg>
                <div style="margin-left: 5px">
                    <span>This subscription is running out of seats. More than 75% of this subscription's seats are occupied.</span>
                    @if (subContextModel.CanUserAdministerSubscription)
                    {
                        <span>&nbsp;Please @Html.Raw(layoutModel.ContactSalesHtml) to purchase more seats or @Html.Raw(layoutModel.ContactSupportHtml) for assistance.</span>
                    }
                </div>
            </div>
        }
    }
</div>

<ul class="nav nav-tabs" id="tabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="basics-tab" data-bs-toggle="tab" data-bs-target="#basics-tab-pane" type="button" role="tab" aria-controls="basics-tab-pane" aria-selected="true">Subscription</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="seating-tab" data-bs-toggle="tab" data-bs-target="#seating-tab-pane" type="button" role="tab" aria-controls="seating-tab-pane" aria-selected="true">
            Active seats
            <span>&nbsp;<span class="@seatingTabBadgeColor">@seatingModel.Seats.Count</span></span>
        </button>
    </li>
    @if (subContextModel.CanUserAdministerSubscription && !seatingModel.SubscriptionHasNoMoreSeats)
    {
        <li class="nav-item"><a class="nav-link" href="@reserveSeatUrl">Reserve seat</a></li>
    }
    @if (subContextModel.ManagementLinks.Any())
    {
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">More</a>
            <ul class="dropdown-menu">
                @foreach (var linkKey in subContextModel.ManagementLinks.Keys)
                {
                    <li>
                        <a class="dropdown-item" href="@subContextModel.ManagementLinks[linkKey]">@linkKey</a>
                    </li>
                }
            </ul>
        </li>
    }
</ul>

<div class="tab-content" id="panes">
    <div class="tab-pane fade show active" id="basics-tab-pane" style="margin-top: 20px" role="tabpanel" aria-labelledby="basics-tab" tabindex="0">
        <form method="post">
            <div class="mb-3">
                <label asp-for="@Model.SubscriptionName" class="form-label"></label>&nbsp;<span class="text-danger">*</span>
                @if (CanUserEditSubscriptionName())
                {
                    <input asp-for="@Model.SubscriptionName" class="form-control" type="text" aria-describedBy="subNameHelp" />
                }
                else
                {
                    <input asp-for="@Model.SubscriptionName" class="form-control" type="text" aria-describedBy="subNameHelp" disabled />
                }
                <span asp-validation-for="@Model.SubscriptionName" class="text-danger"></span>
                <div id="subNameHelp" class="form-text">The name of this subscription as it will appear in the UI.</div>
            </div>
            <div class="mb-3">
                <label asp-for="@Model.TenantName" class="form-label"></label>&nbsp;<span class="text-danger">*</span>
                @if (CanUserEditTenantName())
                {
                    <input asp-for="@Model.TenantName" class="form-control" type="text" aria-describedBy="tenantNameHelp" />
                }
                else
                {
                    <input asp-for="@Model.TenantName" class="form-control" type="text" aria-describedBy="tenantNameHelp" disabled />
                }
                <span asp-validation-for="@Model.TenantName" class="text-danger"></span>
                <div id="tenantNameHelp" class="form-text">The name of the subscriber's organization as it will appear in the UI.</div>
            </div>
            <div class="mb-3">
                <label asp-for="@Model.TenantCountry" class="form-label"></label>&nbsp;<span class="text-danger">*</span>
                @if (CanUserEditTenantCountry())
                {
                    <select asp-for="@Model.TenantCountry" asp-items="@Model.Countries" class="form-select"></select>
                }
                else
                {
                    <select asp-for="@Model.TenantCountry" asp-items="@Model.Countries" class="form-select" disabled></select>
                }
                <span asp-validation-for="@Model.TenantCountry" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="@Model.AdminName" class="form-label"></label>&nbsp;<span class="text-danger">*</span>
                @if (CanUserEditAdminName())
                {
                    <input asp-for="@Model.AdminName" class="form-control" type="text" aria-describedBy="adminNameHelp" />
                }
                else
                {
                    <input asp-for="@Model.AdminName" class="form-control" type="text" aria-describedBy="adminNameHelp" disabled />
                }
                <span asp-validation-for="@Model.AdminName" class="text-danger"></span>
                <div id="adminRoleNameHelp" class="form-text">The name of this subscription's primary admin.</div>
            </div>
            <div class="mb-3">
                <label asp-for="@Model.AdminEmail" class="form-label"></label>&nbsp;<span class="text-danger">*</span>
                @if (CanUserEditAdminEmail())
                {
                    <input asp-for="@Model.AdminEmail" class="form-control" type="text" aria-describedBy="adminEmailHelp" />
                }
                else
                {
                    <input asp-for="@Model.AdminEmail" class="form-control" type="text" aria-describedBy="adminEmailHelp" disabled />
                }
                <span asp-validation-for="@Model.AdminEmail" class="text-danger"></span>
                <div id="adminRoleNameHelp" class="form-text">The email address of this subscription's primary admin.</div>
            </div>
            <div class="mb-3">
                <a data-bs-toggle="collapse" href="#moreOptions" aria-expanded="false" aria-controls="moreOptions">
                    <p class="h6">More options &#x25BC;</p>
                </a>
            </div>
            <div class="collapse" id="moreOptions">
                <div class="mb-3">
                    <label asp-for="@Model.AdminRoleName" class="form-label"></label>
                    @if (CanUserEditAdminRole())
                    {
                        <input asp-for="@Model.AdminRoleName" class="form-control" type="text" aria-describedBy="adminRoleNameHelp" />
                    }
                    else
                    {
                        <input asp-for="@Model.AdminRoleName" class="form-control" type="text" aria-describedBy="adminRoleNameHelp" disabled />
                    }
                    <span asp-validation-for="@Model.AdminRoleName" class="text-danger"></span>
                    <div id="adminRoleNameHelp" class="form-text">If configured, users that belong to this role (in addition to the primary admin configured above) can <b>administer</b> this subscription.</div>
                </div>
                <div class="mb-3">
                    <label asp-for="@Model.UserRoleName" class="form-label"></label>
                    @if (CanUserEditUserRole())
                    {
                        <input asp-for="@Model.UserRoleName" class="form-control" type="text" aria-describedBy="userRoleNameHelp" />
                    }
                    else
                    {
                        <input asp-for="@Model.UserRoleName" class="form-control" type="text" aria-describedBy="userRoleNameHelp" disabled />
                    }
                    <span asp-validation-for="@Model.UserRoleName" class="text-danger"></span>
                    <div id="userRoleNameHelp" class="form-text">If configured, only users that belong to this role can <b>use</b> this subscription.</div>
                </div>
                <div class="mb-3">
                    <label asp-for="@Model.State" class="form-label"></label>&nbsp;<span class="text-danger">*</span>
                    @if (CanUserEditState())
                    {
                        <select asp-for="@Model.State" asp-items="@Model.AvailableStates" class="form-select"></select>
                    }
                    else
                    {
                        <select asp-for="@Model.State" asp-items="@Model.AvailableStates" class="form-select" disabled></select>
                    }
                    <span asp-validation-for="@Model.State" class="text-danger"></span>
                </div>
                <div class="mb-3 form-check form-switch">
                    @if (CanUserEditConfigurationState())
                    {
                        <input class="form-check-input" type="checkbox" role="switch" asp-for="@Model.IsBeingConfigured" />
                    }
                    else
                    {
                        <input class="form-check-input" type="checkbox" role="switch" asp-for="@Model.IsBeingConfigured" disabled />
                    }
                    <label asp-for="@Model.IsBeingConfigured" class="form-check-label"></label>
                </div>
                <div class="mb-3 form-check form-switch">
                    @if (CanUserEditFreeTrialSubscription())
                    {
                        <input class="form-check-input" type="checkbox" role="switch" asp-for="@Model.IsFreeTrialSubscription" />
                    }
                    else
                    {
                        <input class="form-check-input" type="checkbox" role="switch" asp-for="@Model.IsFreeTrialSubscription" disabled />
                    }
                    <label asp-for="@Model.IsFreeTrialSubscription" class="form-check-label"></label>
                </div>
                <div class="mb-3 form-check form-switch">
                    @if (CanUserEditTestSubscription())
                    {
                        <input class="form-check-input" type="checkbox" role="switch" asp-for="@Model.IsTestSubscription" />
                    }
                    else
                    {
                        <input class="form-check-input" type="checkbox" role="switch" asp-for="@Model.IsTestSubscription" disabled />
                    }
                    <label asp-for="@Model.IsTestSubscription" class="form-check-label"></label>
                </div>
                <div class="mb-3">
                    <label asp-for="@Model.OfferId" class="form-label"></label>&nbsp;<span class="text-danger">*</span>
                    @if (CanUserEditOfferId())
                    {
                        <input asp-for="@Model.OfferId" class="form-control" type="text" />
                    }
                    else
                    {
                        <input asp-for="@Model.OfferId" class="form-control" type="text" disabled />
                    }
                    <span asp-validation-for="@Model.State" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="@Model.PlanId" class="form-label"></label>&nbsp;<span class="text-danger">*</span>
                    @if (CanUserEditPlanId())
                    {
                        <input asp-for="@Model.PlanId" class="form-control" type="text" />
                    }
                    else
                    {
                        <input asp-for="@Model.PlanId" class="form-control" type="text" disabled />
                    }
                </div>
                <div class="mb-3">
                    <label asp-for="@Model.SubscriptionId" class="form-label"></label>
                    <input asp-for="@Model.SubscriptionId" class="form-control" type="text" disabled />
                </div>
                <div class="mb-3">
                    <label asp-for="@Model.TenantId" class="form-label"></label>
                    <input asp-for="@Model.TenantId" class="form-control" type="text" disabled />
                </div>
                <div class="mb-3">
                    <label asp-for="@subContextModel.CreatedUtc" class="form-label"></label>
                    <input asp-for="@subContextModel.CreatedUtc" class="form-control" type="datetime" disabled />
                </div>
                <div class="mb-3">
                    <label asp-for="@subContextModel.StateLastUpdatedUtc" class="form-label"></label>
                    <input asp-for="@subContextModel.StateLastUpdatedUtc" class="form-control" type="datetime" disabled />
                </div>
            </div>
            <hr />
            <div style="margin-top: 20px; margin-bottom: 20px">
                <button type="submit" class="btn btn-primary">Save changes</button>
            </div>
        </form>
    </div>
    <div class="tab-pane fade" id="seating-tab-pane" style="margin-top: 20px" role="tabpanel" aria-labelledby="seating-tab" tabindex="0">
        @if (seatingModel.Seats.Any())
        {
            <table class="table">
                <tbody>
                    @foreach (var seat in seatingModel.Seats)
                    {
                        <tr>
                            <td>
                                @seat.UserName <br />
                                <small>@seat.SeatId</small>
                            </td>
                            <td>
                                @if (seat.IsReserved)
                                {
                                    <span class="badge text-bg-secondary">Reserved</span>
                                }
                                else if (seat.IsLimited)
                                {
                                    <span class="badge text-bg-warning">Limited</span>
                                }
                            </td>
                            <td>
                                <div class="float-end">
                                    <span>
                                        <a class="btn btn-primary" href="mailto:@seat.UserEmail">Contact user</a>
                                    </span>
                                    <span>
                                        <a class="btn btn-danger"
                                           href="@Url.RouteUrl(SubscriptionsController.RouteNames.GetReleaseSeat,
                                                       new { subscriptionId = subContextModel.SubscriptionId, seatId = seat.SeatId })">Release seat</a>
                                    </span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-secondary" role="alert">
                No active seats in this subscription.
                @if (!layoutModel.IsTurnstileAdmin)
                {
                    <span> <a href="@reserveSeatUrl">Reserve a seat now.</a></span>
                }
            </div>
        }
    </div>
</div>
